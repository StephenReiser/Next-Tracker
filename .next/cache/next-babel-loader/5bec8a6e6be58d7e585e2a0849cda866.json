{"ast":null,"code":"var _jsxFileName = \"/Users/StephenReiser/Desktop/SteveProject/next-sample/components/NewPost.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport NewPostInput from './NewPostInput';\nimport NewPostTextArea from './NewPostTextArea';\n\nconst NewPost = props => {\n  const {\n    0: myValue,\n    1: setMyValue\n  } = useState({\n    author: '',\n    content: '',\n    date: '',\n    title: ''\n  });\n\n  const onChange = e => {\n    const data = _objectSpread({}, myValue);\n\n    data[e.target.name.toLowerCase()] = e.target.value;\n    setMyValue(data);\n  }; // obsubmit should be a fetch to the back end as a POST req and we shoulld handle it correctly there\n\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const newPosts = [...props.posts];\n    newPosts.push(myValue);\n    props.updateList(newPosts);\n    setMyValue({\n      author: '',\n      content: '',\n      date: '',\n      title: ''\n    });\n    fetch(`http://localhost:3000/api/postg`, {\n      method: 'POST',\n      body: JSON.stringify(myValue),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(data => data.json()).then(data => console.log(data)); // console.log(myValue)\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: e => onSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(NewPostInput, {\n    value: myValue.author,\n    name: 'Author',\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), __jsx(NewPostInput, {\n    value: myValue.title,\n    name: 'Title',\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), __jsx(NewPostInput, {\n    value: myValue.date,\n    name: 'Date',\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), __jsx(NewPostTextArea, {\n    value: myValue.content,\n    name: 'Content',\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    type: \"submit\",\n    value: \"submit\",\n    className: \"btn btn-primary mb-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n};\n\nexport default NewPost;","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/next-sample/components/NewPost.js"],"names":["React","useState","NewPostInput","NewPostTextArea","NewPost","props","myValue","setMyValue","author","content","date","title","onChange","e","data","target","name","toLowerCase","value","onSubmit","preventDefault","newPosts","posts","push","updateList","fetch","method","body","JSON","stringify","headers","then","json","console","log"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport NewPostInput from './NewPostInput'\nimport NewPostTextArea from './NewPostTextArea'\n\nconst NewPost = (props) => {\n\n    const [ myValue, setMyValue ] = useState({\n        author: '',\n        content: '',\n        date: '',\n        title: '',\n    })\n\n    \n\n    const onChange = (e) => {\n        \n        const data = {...myValue}\n        data[e.target.name.toLowerCase()] = e.target.value\n\n        setMyValue(data)\n\n    }\n\n    // obsubmit should be a fetch to the back end as a POST req and we shoulld handle it correctly there\n    const onSubmit = (e) => {\n        e.preventDefault()\n        \n\n        const newPosts = [...props.posts]\n        newPosts.push(myValue)\n        props.updateList(newPosts)\n        setMyValue({\n            author: '',\n            content: '',\n            date: '',\n            title: '',\n        })\n        fetch(`http://localhost:3000/api/postg`, {\n            method: 'POST',\n            body: JSON.stringify(myValue),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(data => data.json()).then(data => console.log(data))\n        // console.log(myValue)\n    }\n    return(\n        \n            <form onSubmit = {(e) => onSubmit(e)}>\n                <NewPostInput \n                value = {myValue.author}\n                name = {'Author'}\n                onChange = {onChange}\n                />\n                <NewPostInput \n                value = {myValue.title}\n                name = {'Title'}\n                onChange = {onChange}\n                />\n                <NewPostInput \n                value = {myValue.date}\n                name = {'Date'}\n                onChange = {onChange}\n                />\n                <NewPostTextArea \n                value = {myValue.content}\n                name = {'Content'}\n                onChange = {onChange}\n                />\n            <input type=\"submit\" value=\"submit\" className = \"btn btn-primary mb-2\"/>\n            </form>\n        \n    )\n}\n\nexport default NewPost"]},"metadata":{},"sourceType":"module"}