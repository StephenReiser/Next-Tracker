{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/StephenReiser/Desktop/SteveProject/next-sample/components/Home.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport MyHead from './MyHead';\nimport Result from './Result';\nimport Header from './Header';\nimport Form from './Form';\nimport NewPost from './NewPost';\nimport fetch from 'isomorphic-unfetch';\n\nvar Home = function Home() {\n  var _useState = useState([{\n    author: \"Steve\",\n    title: 'First Post',\n    content: \"Lots of stuff goes here\",\n    date: \"2/1/2020\",\n    _id: 1\n  }, {\n    author: \"Steve\",\n    title: 'Second Post',\n    content: \"Second Post Content\",\n    date: \"2/2/2020\",\n    _id: 2\n  }]),\n      results = _useState[0],\n      setResults = _useState[1]; // const onChange = (e) => {\n  //     const data = { ...results };\n  //     let name = e.target.name;\n  //     console.log(name)\n  //     // so we are naming the inputs as Total Fat or Target Carbs, so this is splitting the name so we can do results[calories][total] - super cool way to use this on all inputs - especially if we have the objects combined liek this \n  //     let resultType = name.split(\" \")[0].toLowerCase();\n  //     let resultMacro = name.split(\" \")[1].toLowerCase();\n  //     console.log(resultType)\n  //     console.log(resultMacro)\n  //     data[resultMacro][resultType] = e.target.value;\n  //     setResults(data);\n  //   }\n\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(MyHead, {\n    pageName: 'Home',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"flex mb-4 text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, results.map(function (post, index) {\n    return __jsx(Result, {\n      post: post,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    });\n  })), __jsx(\"div\", {\n    className: \"flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(NewPost, {\n    updateList: setResults,\n    posts: results,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n};\n\nHome.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('/api/blog'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          console.log(data); // return {\n          //   setResults(data)\n          // };\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/next-sample/components/Home.js"],"names":["React","useState","MyHead","Result","Header","Form","NewPost","fetch","Home","author","title","content","date","_id","results","setResults","map","post","index","getInitialProps","res","json","data","console","log","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,kBAEeP,QAAQ,CAAC,CACnC;AACIQ,IAAAA,MAAM,EAAE,OADZ;AAEIC,IAAAA,KAAK,EAAE,YAFX;AAGIC,IAAAA,OAAO,EAAE,yBAHb;AAIIC,IAAAA,IAAI,EAAE,UAJV;AAKIC,IAAAA,GAAG,EAAE;AALT,GADmC,EAQjC;AACEJ,IAAAA,MAAM,EAAE,OADV;AAEEC,IAAAA,KAAK,EAAE,aAFT;AAGEC,IAAAA,OAAO,EAAE,qBAHX;AAIEC,IAAAA,IAAI,EAAE,UAJR;AAKEC,IAAAA,GAAG,EAAE;AALP,GARiC,CAAD,CAFvB;AAAA,MAERC,OAFQ;AAAA,MAECC,UAFD,iBAmBf;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;AAEA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,QAAQ,EAAE,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,OAAO,CAACE,GAAR,CAAY,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC1B,WACA,MAAC,MAAD;AAAQ,MAAA,IAAI,EAAID,IAAhB;AAAsB,MAAA,GAAG,EAAIC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA;AAGH,GAJA,CADL,CAHJ,EAUE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,OAAD;AAAS,IAAA,UAAU,EAAIH,UAAvB;AAAmC,IAAA,KAAK,EAAID,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAVF,CADA;AAoBH,CA1DD;;AA4DAN,IAAI,CAACW,eAAL,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACDZ,KAAK,CAAC,WAAD,CADJ;;AAAA;AACba,UAAAA,GADa;AAAA;AAAA,2CAEAA,GAAG,CAACC,IAAJ,EAFA;;AAAA;AAEbC,UAAAA,IAFa;AAInBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,MAA9C;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EALmB,CAOnB;AACA;AACA;;AATmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAWA,eAAed,IAAf","sourcesContent":["import React, { useState } from 'react'\nimport MyHead from './MyHead'\nimport Result from './Result'\nimport Header from './Header'\nimport Form from './Form'\nimport NewPost from './NewPost'\nimport fetch from 'isomorphic-unfetch'\n\n\nconst Home = () => {\n\n    const [results, setResults] = useState([\n        {\n            author: \"Steve\",\n            title: 'First Post',\n            content: \"Lots of stuff goes here\",\n            date: \"2/1/2020\",\n            _id: 1\n\n        },{\n            author: \"Steve\",\n            title: 'Second Post',\n            content: \"Second Post Content\",\n            date: \"2/2/2020\",\n            _id: 2\n        }\n    ])\n\n    // const onChange = (e) => {\n    //     const data = { ...results };\n    \n    //     let name = e.target.name;\n    //     console.log(name)\n\n    //     // so we are naming the inputs as Total Fat or Target Carbs, so this is splitting the name so we can do results[calories][total] - super cool way to use this on all inputs - especially if we have the objects combined liek this \n\n    \n    //     let resultType = name.split(\" \")[0].toLowerCase();\n    //     let resultMacro = name.split(\" \")[1].toLowerCase();\n    //     console.log(resultType)\n    //     console.log(resultMacro)\n    \n    //     data[resultMacro][resultType] = e.target.value;\n    \n    //     setResults(data);\n    //   }\n\n    return(\n    <div>\n        <MyHead pageName={'Home'} />\n        <Header />\n        <div className=\"flex mb-4 text-center\">\n            {results.map((post, index) => {\n                return(\n                <Result post = {post} key = {index}/>\n                )\n            })}\n      </div>\n      <div className=\"flex\">\n        {/* <Form data={results} item=\"Total\" onChange={onChange} /> */}\n        <NewPost updateList = {setResults} posts = {results}/>\n        \n      </div>\n      \n      \n    </div>\n    )\n}\n\nHome.getInitialProps = async function() {\n    const res = await fetch('/api/blog');\n    const data = await res.json();\n  \n    console.log(`Show data fetched. Count: ${data.length}`);\n    console.log(data)\n  \n    // return {\n    //   setResults(data)\n    // };\n  };\nexport default Home"]},"metadata":{},"sourceType":"module"}