{"ast":null,"code":"var _jsxFileName = \"/Users/StephenReiser/Desktop/SteveProject/next-sample/components/Home.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport MyHead from './MyHead';\nimport Result from './Result';\nimport Header from './Header';\nimport Form from './Form';\n\nconst Home = () => {\n  const {\n    0: results,\n    1: setResults\n  } = useState([{\n    author: \"Steve\",\n    title: 'First Post',\n    content: \"Lots of stuff goes here\",\n    date: \"2/1/2020\"\n  }, {\n    author: \"Steve\",\n    title: 'Second Post',\n    content: \"Second Post Content\",\n    date: \"2/2/2020\"\n  }]);\n\n  const onChange = e => {\n    const data = _objectSpread({}, results);\n\n    let name = e.target.name;\n    console.log(name); // so we are naming the inputs as Total Fat or Target Carbs, so this is splitting the name so we can do results[calories][total] - super cool way to use this on all inputs - especially if we have the objects combined liek this \n\n    let resultType = name.split(\" \")[0].toLowerCase();\n    let resultMacro = name.split(\" \")[1].toLowerCase();\n    console.log(resultType);\n    console.log(resultMacro);\n    data[resultMacro][resultType] = e.target.value;\n    setResults(data);\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(MyHead, {\n    pageName: 'Home',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"flex mb-4 text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, results.map((post, index) => {\n    return __jsx(Result, {\n      post: post,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  })), __jsx(\"div\", {\n    className: \"flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(Form, {\n    data: results,\n    item: \"Total\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), __jsx(Form, {\n    data: results,\n    item: \"Target\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), __jsx(Form, {\n    data: results,\n    item: \"Variant\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"flex text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"w-full m-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Save\"))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/next-sample/components/Home.js"],"names":["React","useState","MyHead","Result","Header","Form","Home","results","setResults","author","title","content","date","onChange","e","data","name","target","console","log","resultType","split","toLowerCase","resultMacro","value","map","post","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport MyHead from './MyHead'\nimport Result from './Result'\nimport Header from './Header'\nimport Form from './Form'\n\n\nconst Home = () => {\n\n    const [results, setResults] = useState([\n        {\n            author: \"Steve\",\n            title: 'First Post',\n            content: \"Lots of stuff goes here\",\n            date: \"2/1/2020\"\n\n        },{\n            author: \"Steve\",\n            title: 'Second Post',\n            content: \"Second Post Content\",\n            date: \"2/2/2020\"\n        }\n    ])\n\n    const onChange = (e) => {\n        const data = { ...results };\n    \n        let name = e.target.name;\n        console.log(name)\n\n        // so we are naming the inputs as Total Fat or Target Carbs, so this is splitting the name so we can do results[calories][total] - super cool way to use this on all inputs - especially if we have the objects combined liek this \n\n    \n        let resultType = name.split(\" \")[0].toLowerCase();\n        let resultMacro = name.split(\" \")[1].toLowerCase();\n        console.log(resultType)\n        console.log(resultMacro)\n    \n        data[resultMacro][resultType] = e.target.value;\n    \n        setResults(data);\n      }\n\n    return(\n    <div>\n        <MyHead pageName={'Home'} />\n        <Header />\n        <div className=\"flex mb-4 text-center\">\n            {results.map((post, index) => {\n                return(\n                <Result post = {post} key = {index}/>\n                )\n            })}\n      </div>\n      <div className=\"flex\">\n        <Form data={results} item=\"Total\" onChange={onChange} />\n        <Form data={results} item=\"Target\" onChange={onChange} />\n        <Form data={results} item=\"Variant\" onChange={onChange} />\n      </div>\n      <div className=\"flex text-center\">\n        <div className=\"w-full m-4\">\n          <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n              Save\n          </button>\n        </div>\n      </div>\n    </div>\n    )\n}\nexport default Home"]},"metadata":{},"sourceType":"module"}