{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport NewPostInput from './NewPostInput';\nimport NewPostTextArea from './NewPostTextArea';\n\nvar NewPost = function NewPost(props) {\n  var _useState = useState({\n    author: '',\n    content: '',\n    date: '',\n    title: ''\n  }),\n      myValue = _useState[0],\n      setMyValue = _useState[1];\n\n  var onChange = function onChange(e) {\n    var data = _objectSpread({}, myValue);\n\n    data[e.target.name.toLowerCase()] = e.target.value;\n    setMyValue(data);\n  }; // obsubmit should be a fetch to the back end as a POST req and we shoulld handle it correctly there\n\n\n  var _onSubmit = function onSubmit(e) {\n    e.preventDefault();\n\n    var newPosts = _toConsumableArray(props.posts);\n\n    newPosts.push(myValue);\n    props.updateList(newPosts);\n    setMyValue({\n      author: '',\n      content: '',\n      date: '',\n      title: ''\n    });\n    fetch(\"http://localhost:3000/api/blog\", {\n      method: 'POST',\n      body: _JSON$stringify(myValue),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (data) {\n      return data.json();\n    }).then(function (data) {\n      return console.log(data);\n    }); // console.log(myValue)\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: function onSubmit(e) {\n      return _onSubmit(e);\n    }\n  }, __jsx(NewPostInput, {\n    value: myValue.author,\n    name: 'Author',\n    onChange: onChange\n  }), __jsx(NewPostInput, {\n    value: myValue.title,\n    name: 'Title',\n    onChange: onChange\n  }), __jsx(NewPostInput, {\n    value: myValue.date,\n    name: 'Date',\n    onChange: onChange\n  }), __jsx(NewPostTextArea, {\n    value: myValue.content,\n    name: 'Content',\n    onChange: onChange\n  }), __jsx(\"input\", {\n    type: \"submit\",\n    value: \"submit\",\n    className: \"btn btn-primary\"\n  }));\n};\n\nexport default NewPost;","map":null,"metadata":{},"sourceType":"module"}