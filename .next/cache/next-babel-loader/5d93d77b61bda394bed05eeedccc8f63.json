{"ast":null,"code":"var _jsxFileName = \"/Users/StephenReiser/Desktop/SteveProject/next-sample/components/Home.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport MyHead from './MyHead';\nimport Result from './Result';\nimport Header from './Header';\nimport Form from './Form';\n\nconst Home = () => {\n  const {\n    0: results,\n    1: setResults\n  } = useState({\n    calories: {\n      label: \"Calories\",\n      total: 1840,\n      target: 1840,\n      variant: 15\n    },\n    carbs: {\n      label: \"Carbs\",\n      total: 190,\n      target: 160,\n      variant: 15\n    },\n    fat: {\n      label: \"Fat\",\n      total: 55,\n      target: 60,\n      variant: 10\n    },\n    protein: {\n      label: \"Protein\",\n      total: 120,\n      target: 165,\n      variant: 10\n    }\n  });\n\n  const onChange = e => {\n    const data = _objectSpread({}, results);\n\n    let name = e.target.name;\n    console.log(name); // so we are naming the inputs as Total Fat or Target Carbs, so this is splitting the name so we can do results[calories][total] - super cool way to use this on all inputs - especially if we have the objects combined liek this \n\n    let resultType = name.split(\" \")[0].toLowerCase();\n    let resultMacro = name.split(\" \")[1].toLowerCase();\n    console.log(resultType);\n    console.log(resultMacro);\n    data[resultMacro][resultType] = e.target.value;\n    setResults(data);\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(MyHead, {\n    pageName: 'Home',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"flex mb-4 text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(Result, {\n    results: results.calories,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), __jsx(Result, {\n    results: results.carbs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(Result, {\n    results: results.fat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(Result, {\n    results: results.protein,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(Form, {\n    data: results,\n    item: \"Total\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), __jsx(Form, {\n    data: results,\n    item: \"Target\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(Form, {\n    data: results,\n    item: \"Variant\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/next-sample/components/Home.js"],"names":["React","useState","MyHead","Result","Header","Form","Home","results","setResults","calories","label","total","target","variant","carbs","fat","protein","onChange","e","data","name","console","log","resultType","split","toLowerCase","resultMacro","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport MyHead from './MyHead'\nimport Result from './Result'\nimport Header from './Header'\nimport Form from './Form'\n\n\nconst Home = () => {\n\n    const [results, setResults] = useState({\n        calories: {\n            label: \"Calories\",\n            total: 1840,\n            target: 1840,\n            variant: 15\n          },\n          carbs: {\n            label: \"Carbs\",\n            total: 190,\n            target: 160,\n            variant: 15\n          },\n          fat: {\n            label: \"Fat\",\n            total: 55,\n            target: 60,\n            variant: 10\n          },\n          protein: {\n            label: \"Protein\",\n            total: 120,\n            target: 165,\n            variant: 10\n          }\n    })\n\n    const onChange = (e) => {\n        const data = { ...results };\n    \n        let name = e.target.name;\n        console.log(name)\n\n        // so we are naming the inputs as Total Fat or Target Carbs, so this is splitting the name so we can do results[calories][total] - super cool way to use this on all inputs - especially if we have the objects combined liek this \n\n    \n        let resultType = name.split(\" \")[0].toLowerCase();\n        let resultMacro = name.split(\" \")[1].toLowerCase();\n        console.log(resultType)\n        console.log(resultMacro)\n    \n        data[resultMacro][resultType] = e.target.value;\n    \n        setResults(data);\n      }\n\n    return(\n    <div>\n        <MyHead pageName={'Home'} />\n        <Header />\n        <div className=\"flex mb-4 text-center\">\n            <Result results={results.calories} />\n            <Result results={results.carbs} />\n            <Result results={results.fat} />\n            <Result results={results.protein} />\n      </div>\n      <div className=\"flex\">\n        <Form data={results} item=\"Total\" onChange={onChange} />\n        <Form data={results} item=\"Target\" onChange={onChange} />\n        <Form data={results} item=\"Variant\" onChange={onChange} />\n      </div>\n    </div>\n    )\n}\nexport default Home"]},"metadata":{},"sourceType":"module"}